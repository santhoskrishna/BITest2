// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System.Collections.Immutable;
using System.IO;
using Microsoft.CodeAnalysis;

namespace Microsoft.AspNetCore.Http.ValidationsGenerator;

public sealed partial class ValidationsGenerator
{
    internal static void EmitValidationsFile(SourceProductionContext context, ((string Left, string Right) Left, ImmutableArray<string> Right) source)
    {
        var withValidations = source.Left.Left;
        var typeValidations = source.Left.Right;
        var validationsFilters = source.Right;
        var writer = new StringWriter();
        var output = new CodeWriter(writer, baseIndent: 0);
        output.WriteLine("// <auto-generated/>");
        output.WriteLine("#nullable enable");
        output.WriteLine("namespace System.Runtime.CompilerServices");
        output.StartBlock();
        output.WriteLine("[AttributeUsage(System.AttributeTargets.Method, AllowMultiple = true)]");
        output.WriteLine("file sealed class InterceptsLocationAttribute : Attribute");
        output.StartBlock();
        output.WriteLine("public InterceptsLocationAttribute(int version, string data) { }");
        output.EndBlock();
        output.EndBlock();
        output.WriteLine();
        output.WriteLine("namespace Microsoft.AspNetCore.Http.Validations.Generated");
        output.StartBlock();
        output.WriteLine("using System;");
        output.WriteLine("using System.Linq;");
        output.WriteLine("using System.Diagnostics;");
        output.WriteLine("using System.ComponentModel.DataAnnotations;");
        output.WriteLine();
        output.Indent--;
        output.WriteLine(EmitEndpointKey());
        output.WriteLine(EmitValidationProblemBuilder());
        output.WriteLine(withValidations);
        output.WriteLine();
        output.WriteLine(typeValidations);
        output.WriteLine();
        output.Write(EmitEndpointValidationFilters(validationsFilters));
        output.WriteLine("}");
        output.WriteLine("#nullable restore");
        context.AddSource("RouteHandlerValidations.g.cs", writer.ToString());
    }
}
