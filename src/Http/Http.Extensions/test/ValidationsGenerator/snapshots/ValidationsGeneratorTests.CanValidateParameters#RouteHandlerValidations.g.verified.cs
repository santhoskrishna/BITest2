//HintName: RouteHandlerValidations.g.cs
// <auto-generated/>
#nullable enable
namespace System.Runtime.CompilerServices
{
    [AttributeUsage(System.AttributeTargets.Method, AllowMultiple = true)]
    file sealed class InterceptsLocationAttribute : Attribute
    {
        public InterceptsLocationAttribute(int version, string data) { }
    }
}

namespace Microsoft.AspNetCore.Http.Validations.Generated
{
    using System;
    using System.Linq;
    using System.Diagnostics;
    using System.ComponentModel.DataAnnotations;
    
    file class EndpointKey(string route, global::System.Collections.Generic.IEnumerable<string> methods)
    {
        public string Route { get; } = route;
        public global::System.Collections.Generic.IEnumerable<string> Methods { get; } = methods;
        
        public override bool Equals(object? obj)
        {
            if (obj is EndpointKey other)
            {
                return string.Equals(Route, other.Route, global::System.StringComparison.OrdinalIgnoreCase) &&
                Methods.SequenceEqual(other.Methods, global::System.StringComparer.OrdinalIgnoreCase);
            }
            return false;
        }
        
        public override int GetHashCode()
        {
            int hash = 17;
            hash = hash * 23 + (Route?.GetHashCode(global::System.StringComparison.OrdinalIgnoreCase) ?? 0);
            hash = hash * 23 + GetMethodsHashCode(Methods);
            return hash;
        }
        
        private static int GetMethodsHashCode(global::System.Collections.Generic.IEnumerable<string> methods)
        {
            if (methods == null)
            {
                return 0;
            }
            int hash = 17;
            foreach (var method in methods)
            {
                hash = hash * 23 + (method?.GetHashCode(global::System.StringComparison.OrdinalIgnoreCase) ?? 0);
            }
            return hash;
        }
    }

    file class ValidationProblemBuilder
    {
        private readonly global::Microsoft.AspNetCore.Http.HttpValidationProblemDetails _problemDetails;
        
        public ValidationProblemBuilder()
        {
            _problemDetails = new global::Microsoft.AspNetCore.Http.HttpValidationProblemDetails();
        }
        
        public ValidationProblemBuilder WithTitle(string title)
        {
            _problemDetails.Title = title;
            return this;
        }
        
        public ValidationProblemBuilder WithStatus(int? status)
        {
            _problemDetails.Status = status;
            return this;
        }
        
        public ValidationProblemBuilder WithDetail(string detail)
        {
            _problemDetails.Detail = detail;
            return this;
        }
        
        public ValidationProblemBuilder WithInstance(string instance)
        {
            _problemDetails.Instance = instance;
            return this;
        }
        
        public ValidationProblemBuilder WithType(string type)
        {
            _problemDetails.Type = type;
            return this;
        }
        
        public ValidationProblemBuilder WithExtensions(global::System.Collections.Generic.IDictionary<string, object> extensions)
        {
            foreach (var kvp in extensions)
            {
                _problemDetails.Extensions[kvp.Key] = kvp.Value;
            }
            return this;
        }
        
        public ValidationProblemBuilder WithErrors(global::System.Collections.Generic.IDictionary<string, string[]> errors)
        {
            foreach (var kvp in errors)
            {
                _problemDetails.Errors[kvp.Key] = kvp.Value;
            }
            return this;
        }
        
        public ValidationProblemBuilder WithError(string key, string error)
        {
            if (_problemDetails.Errors.ContainsKey(key))
            {
                _problemDetails.Errors[key] = _problemDetails.Errors[key].Append(error).ToArray();
            }
            else
            {
                _problemDetails.Errors[key] = new string[] { error };
            }
            return this;
        }
        
        public ValidationProblemBuilder WithErrors(string key, string[] errors)
        {
            if (_problemDetails.Errors.ContainsKey(key))
            {
                _problemDetails.Errors[key] = _problemDetails.Errors[key].Concat(errors).ToArray();
            }
            else
            {
                _problemDetails.Errors[key] = errors;
            }
            return this;
        }
        
        public global::Microsoft.AspNetCore.Http.HttpValidationProblemDetails Build()
        {
            return _problemDetails;
        }
        
        public bool HasValue()
        {
            return _problemDetails.Errors.Count > 0;
        }
    }

    file static class WithValidationsInterceptor
    {
        [global::System.Runtime.CompilerServices.InterceptsLocationAttribute(1, "jZqu1LqTQ9Hw0e9sWMnm198AAABQcm9ncmFtLmNz")]
        public static global::Microsoft.AspNetCore.Builder.IEndpointConventionBuilder WithValidation(this global::Microsoft.AspNetCore.Builder.IEndpointConventionBuilder builder)
        {
            System.Diagnostics.Debugger.Break();
            builder.AddEndpointFilter(async (context, next) =>
            {
                var targetEndpoint = context.HttpContext.Features.Get<global::Microsoft.AspNetCore.Http.Features.IEndpointFeature>()?.Endpoint;
                Debug.Assert(targetEndpoint != null);
                var route = ((global::Microsoft.AspNetCore.Routing.RouteEndpoint)targetEndpoint).RoutePattern.RawText;
                var methods = ((global::Microsoft.AspNetCore.Routing.RouteEndpoint)targetEndpoint).Metadata.GetMetadata<global::Microsoft.AspNetCore.Routing.IHttpMethodMetadata>()?.HttpMethods ?? ["GET"];
                Debug.Assert(route != null);
                var validationFilter = ValidationsFilters.Filters[new EndpointKey(route, methods)];
                var validationProblemDetails = validationFilter(context);
                if (validationProblemDetails == null)
                {
                    return await next(context);
                }
                return global::Microsoft.AspNetCore.Http.TypedResults.ValidationProblem(validationProblemDetails.Errors);
            });
            return builder;
        }
    }


    file static class ValidationTypes
    {
        public static global::Microsoft.AspNetCore.Http.HttpValidationProblemDetails? Validate<T>(T value, global::System.ComponentModel.DataAnnotations.ValidationContext? validationContext = null, IServiceProvider? serviceProvider = null, int currentDepth = 0, bool skipRecurse = false) => null;
    }


    file static class ValidationsFilters
    {
        public static readonly global::System.Collections.Generic.Dictionary<EndpointKey, global::System.Func<global::Microsoft.AspNetCore.Http.EndpointFilterInvocationContext, global::Microsoft.AspNetCore.Http.HttpValidationProblemDetails?>> Filters = new()
        {
            { new EndpointKey("/params", ["GET"]), context => 
                {
                    ValidationProblemBuilder resultBuilder = new();
                    global::System.ComponentModel.DataAnnotations.ValidationResult? validationResult = null;
                    var value0 = context.GetArgument<int>(0);
                    var value1RangeAttribute = new global::System.ComponentModel.DataAnnotations.RangeAttribute(10, 100);
                    validationResult = value1RangeAttribute.GetValidationResult(value0, new global::System.ComponentModel.DataAnnotations.ValidationContext(value0) { DisplayName = "value1" });
                    if (validationResult is not null)
                    {
                        resultBuilder.WithError("value1", validationResult.ErrorMessage);
                    }
                    var value1 = context.GetArgument<int>(1);
                    var value2RangeAttribute = new global::System.ComponentModel.DataAnnotations.RangeAttribute(10, 100);
                    validationResult = value2RangeAttribute.GetValidationResult(value1, new global::System.ComponentModel.DataAnnotations.ValidationContext(value1) { DisplayName = "Valid identifier" });
                    if (validationResult is not null)
                    {
                        resultBuilder.WithError("value2", validationResult.ErrorMessage);
                    }
                    var value2 = context.GetArgument<string>(2);
                    var value3RequiredAttribute = new global::System.ComponentModel.DataAnnotations.RequiredAttribute();
                    validationResult = value3RequiredAttribute.GetValidationResult(value2, new global::System.ComponentModel.DataAnnotations.ValidationContext(value2) { DisplayName = "value3" });
                    if (validationResult is not null)
                    {
                        resultBuilder.WithError("value3", validationResult.ErrorMessage);
                    }
                    var value3 = context.GetArgument<int>(3);
                    var value4CustomValidationAttribute = new global::CustomValidationAttribute() { ErrorMessage = "Value must be an even number" };
                    validationResult = value4CustomValidationAttribute.GetValidationResult(value3, new global::System.ComponentModel.DataAnnotations.ValidationContext(value3) { DisplayName = "value4" });
                    if (validationResult is not null)
                    {
                        resultBuilder.WithError("value4", validationResult.ErrorMessage);
                    }
                    var value4 = context.GetArgument<int>(4);
                    var value5CustomValidationAttribute = new global::CustomValidationAttribute();
                    var value5RangeAttribute = new global::System.ComponentModel.DataAnnotations.RangeAttribute(10, 100);
                    validationResult = value5CustomValidationAttribute.GetValidationResult(value4, new global::System.ComponentModel.DataAnnotations.ValidationContext(value4) { DisplayName = "value5" });
                    if (validationResult is not null)
                    {
                        resultBuilder.WithError("value5", validationResult.ErrorMessage);
                    }
                    validationResult = value5RangeAttribute.GetValidationResult(value4, new global::System.ComponentModel.DataAnnotations.ValidationContext(value4) { DisplayName = "value5" });
                    if (validationResult is not null)
                    {
                        resultBuilder.WithError("value5", validationResult.ErrorMessage);
                    }
                    return resultBuilder.HasValue() ? resultBuilder.Build() : null;
                }
            },

        };
    }
}
#nullable restore
